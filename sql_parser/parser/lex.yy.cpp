
#line 3 "lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart (FILE *input_file ,yyscan_t yyscanner );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void yy_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yy_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void yypop_buffer_state (yyscan_t yyscanner );

static void yyensure_buffer_stack (yyscan_t yyscanner );
static void yy_load_buffer_state (yyscan_t yyscanner );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *yyalloc (yy_size_t ,yyscan_t yyscanner );
void *yyrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void yyfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(yyscanner) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 295
#define YY_END_OF_BUFFER 296
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1232] =
    {   0,
        0,    0,    0,    0,    0,    0,  296,  294,  293,  293,
      250,  294,  288,  250,  250,  294,  250,  250,  260,  250,
      233,  233,  294,  253,  257,  254,  294,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  294,  250,  292,  292,  277,  255,    0,
      245,  243,    0,  288,  251,    0,  244,  242,    0,    0,
      233,    0,  235,    0,  290,  234,    0,    0,    0,  287,
      262,  258,  256,  259,  263,    0,  280,    0,    0,  277,
      277,  277,  277,  277,    9,  277,  277,    0,  277,  277,

      277,  277,  277,   20,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
       89,  277,   91,  100,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  135,  277,
      140,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  202,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,    0,  277,  277,  277,
        0,  279,    0,  252,  291,  277,    0,    0,  243,    0,

        0,    0,  242,    0,  289,    0,  238,  234,    0,  248,
        0,  236,  247,  261,    0,  284,    0,  286,    0,  285,
        1,    2,  277,  277,    6,    7,  277,   10,  277,  274,
        0,  277,  277,  277,  277,  277,   16,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,   43,   50,  277,  277,  277,  277,  277,
       60,  277,  277,  277,  277,  277,  277,   67,  277,  277,
      277,  277,  277,  277,  277,   75,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
       97,  277,  277,  104,  277,  277,  277,  277,  277,  277,

      277,  277,  277,  277,  277,  277,  276,  277,  277,  277,
      275,  128,  277,  277,  131,  277,  277,  277,  277,  277,
      142,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  175,  277,  277,
      277,  277,  277,  277,  182,  189,  277,  277,  277,  273,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  213,  277,
      277,  277,  277,  277,  277,  277,  277,  277,    0,  228,
      277,  277,  278,    5,    0,  243,    0,  242,  289,    0,

      237,  281,  283,  282,  277,  277,  277,  277,  249,  277,
      277,  277,  277,  277,   17,   18,  277,   21,  277,   23,
      277,  277,   25,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,   44,  277,
      277,  277,  277,  277,   55,  277,  277,  277,   62,   63,
      277,   64,   65,   68,  277,  277,   71,  277,  277,  277,
      277,  277,  277,   78,   79,  277,  277,   83,  277,  277,
       46,  277,  277,  277,  277,  277,  277,  200,  177,   97,
       14,  277,   99,  277,  102,  105,  106,  277,  277,  109,
      110,  277,  277,  113,  277,  116,  117,  120,  277,  277,

      277,  277,  277,  277,  277,  277,  277,  277,  133,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  153,  155,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  176,  277,  178,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      196,  197,  198,  277,  277,  277,  277,  239,  277,  206,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  224,  222,  277,  277,  226,  277,
      246,  229,  277,    0,    0,    0,    0,    3,  277,  277,

      277,  277,  232,  277,  277,  277,   19,  277,  270,  277,
      277,   26,  277,  277,  277,  277,  277,  277,  277,  277,
      272,  277,   35,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  241,   73,   74,   76,  277,  277,   81,   82,
      277,  277,  277,  277,  103,  277,   93,   94,  277,  277,
      277,  277,  277,  277,  108,  111,  112,  277,  277,  277,
      277,  122,  277,  277,  277,  277,  277,  230,  277,  277,
      277,  277,  277,  277,  141,  143,  277,  277,  277,  277,
      277,  277,  150,  277,  151,  154,  277,  277,  277,  277,

      277,  277,  277,  277,  277,  277,  166,  157,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  192,  277,
      277,  277,  277,  277,  277,  277,  265,  277,  207,  277,
      277,  277,  277,  277,  277,  212,  214,  277,  277,  218,
      277,  277,  277,  223,  225,  227,  277,  277,    8,  277,
       12,  277,   15,  277,   24,  277,  277,  277,   28,  277,
      277,  277,  277,  277,   34,  277,   40,  277,  277,  277,
      277,  277,  277,  277,  277,   54,  277,  277,  277,   61,
      277,   66,  277,   70,  277,   74,  277,  277,   84,  277,

      277,  277,   90,   92,  277,   96,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,   48,  277,  277,
      277,  134,  277,  277,  138,  277,  277,  277,  277,  277,
      277,  277,  277,  157,  277,  159,  160,  277,  277,  277,
      164,  165,  167,  168,  169,   49,  172,  277,  277,  277,
      179,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  193,  277,  277,  277,  277,  277,  277,  277,
      277,  208,  277,  209,  277,  211,  268,  277,  277,  218,
      277,  277,  277,  277,    4,  277,   13,   22,  277,  277,
       27,   29,  277,  277,  277,   33,  277,  277,  277,  277,

      277,   50,   51,   52,   53,  277,  277,  277,  277,   69,
       72,   77,  277,  277,  277,  277,  277,   97,  277,  101,
      107,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  130,  277,   50,  277,  277,  144,  277,  277,
      147,  277,  277,  152,  277,  158,  161,  162,  277,  170,
      277,  277,  277,  277,  180,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  264,  277,  277,  277,  277,  277,
      277,  204,  277,  240,  277,  277,  277,  277,  220,  221,
      277,  277,  277,  277,  277,  277,   32,  271,  277,   41,
       45,  277,  277,   56,  277,   58,  277,   80,  277,  277,

      277,  277,  277,   98,  277,  118,  119,  277,  277,  277,
      277,  277,  277,  277,  277,  129,  277,  137,  277,  277,
      277,  277,  277,  277,  163,  277,  277,  277,  181,  277,
      184,  277,  277,  277,  277,  190,  277,  277,  277,  277,
      277,  201,  203,  205,  210,  215,  216,  277,  277,  231,
      277,   25,  269,   30,  277,  277,  277,  277,   42,  266,
      267,  277,  277,  136,  277,  277,  277,  277,  277,  114,
      277,  277,  124,  277,  277,  124,  277,  277,  277,  277,
      277,  146,  148,  277,  277,  277,  173,  174,  277,  277,
      277,  277,  277,  277,  277,  194,  277,  199,  277,  219,

      277,  277,   31,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  123,  125,  277,  277,  277,
      277,  139,  277,  149,  156,  277,  277,  185,  277,  277,
      277,  277,  195,  277,  277,  277,  277,  277,  277,  277,
       59,  277,  277,   87,   88,   95,  277,  277,   47,  277,
      277,  277,  145,  277,  277,  277,  277,  277,  277,  277,
      277,  277,   36,   37,   39,  277,  277,  277,  277,  121,
      277,  277,  277,  277,  183,  277,  277,  277,  277,  277,
      220,  277,  277,   57,   85,  277,  277,  277,  127,  277,
      277,  277,  277,  277,  191,  217,   11,  277,  277,  115,

      277,  277,  277,  186,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,   86,  277,  277,  277,  277,  188,
       38,  277,  277,  277,  277,  126,  132,  171,  277,  187,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    9,   10,   11,
        8,   12,   13,    8,   14,   15,   16,   17,   18,   19,
       20,   21,   20,   20,   20,   22,   20,   23,    8,   24,
       25,   26,    1,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
        1,   54,    1,    8,   55,   56,   57,   58,   59,   60,

       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,   77,   78,   79,   80,
       81,   82,    1,   83,    1,    8,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[84] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        1,    1,    1,    1,    4,    1,    6,    6,    6,    6,
        6,    6,    1,    1,    1,    1,    1,    6,    6,    6,
        6,    6,    6,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    1,    7,    8,    6,    6,    6,    6,
        6,    6,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    1
    } ;

static yyconst flex_int16_t yy_base[1252] =
    {   0,
        0,    0,  706,  700,   56,   57,  710, 2687, 2687, 2687,
      684,   83,    0, 2687,  614,   84,   78,   87,   98,  610,
      145,  107,  585,   65, 2687,   85,  126,  195,  264,  141,
      143,  182,  236,   47,  113,  268,   61,  195,  247,  263,
      145,  278,  294,   75,  317,  361,  407,  340,  115,  301,
      138,  129,  163,  232,  526, 2687,  590,  451, 2687,  153,
     2687,  595,  287,    0, 2687,  143, 2687,  580,  147,  437,
      486,  541,  495,  466, 2687,  513,  116,  540,    0, 2687,
     2687,  514, 2687, 2687, 2687,  534,  189,  533,  522,    0,
      180,  190,  342,  170,  200,  185,  217,  127,  364,  343,

      211,  222,  243,    0,  378,  413,  524,  389,  302,  415,
      536,  398,  315,  358,  467,  418,  447,  507,  490,  505,
      503,  497,  508,  506,  526,  537,  557,  540,  544,  539,
        0,  547,  588,    0,  559,  560,  550,  564,  580,  586,
      610,  592,  602,  616,  613,  589,  594,  638,    0,  598,
      630,  619,  626,  652,  634,  657,  696,  648,  651,  652,
      652,  661,  708,  655,  670,  662,  687,  660,  665,  718,
      712,  676,  737,  704,  716,    0,  751,  758,  730,  773,
      724,  768,  730,  778,  746,  759,    0,  753,  772,  758,
      832, 2687,  486, 2687, 2687,  809,  374,  816,  841,  846,

      455,  842,  847,  850,    0,  854,  860,  888,  904,  259,
      894,  910,    0, 2687,  137, 2687,  144, 2687,  324, 2687,
        0,    0,  780,  815,    0,    0,  823,    0,  814,    0,
      881,  816,  827,  814,  829,  840,    0,  890,  898,  902,
      896,  906,  896,  909,  901,  903,  903,  927,  905,  922,
      906,  909,  928,    0,  952,  929,  962,  947,  946,  945,
        0,  964,  952,  957,  958,  963,  967,    0,  960,  973,
      962,  965,  964,  981,  984,  983,  974,  977,  977,  983,
      997,  998, 1000,  991, 1004, 1016, 1013, 1018, 1003, 1020,
     1050, 1009, 1014, 1010, 1018, 1027, 1012, 1030, 1030, 1035,

     1039, 1062, 1039, 1031,  420, 1059,    0, 1057, 1049, 1066,
     1050, 1065, 1057, 1058,    0, 1057, 1069, 1080, 1074, 1081,
     1082, 1069, 1087, 1080, 1094, 1091, 1083, 1102, 1109, 1102,
     1115, 1118, 1123, 1120, 1107, 1109, 1110, 1120, 1129, 1127,
     1127, 1124, 1136, 1128, 1139, 1126, 1145,    0, 1124, 1136,
     1146, 1154, 1136, 1156, 1173,    0, 1144, 1164, 1152,    0,
     1167, 1165, 1169, 1163, 1172, 1182, 1164, 1181, 1186, 1190,
     1182, 1188, 1184, 1187, 1197, 1208, 1208, 1207,    0, 1203,
      411, 1199, 1227, 1225, 1223, 1227, 1232, 1224,  451,    0,
     1227, 1232, 2687,    0,  409,  696,  492,  805,    0, 1292,

     1298, 2687, 2687, 2687, 1230, 1225, 1237,  396, 2687, 1249,
     1257, 1267, 1261, 1260,    0,    0, 1289,    0, 1294,    0,
      384, 1290, 1297, 1288, 1297, 1302, 1292, 1301, 1299, 1289,
     1301, 1306, 1292, 1293, 1295, 1310, 1301, 1315, 1301, 1305,
     1318, 1299, 1297, 1305, 1312, 1315, 1327, 1340,    0,    0,
     1344,    0, 1346,    0, 1340, 1337,    0, 1357, 1355, 1353,
     1343, 1359, 1357,    0, 1347, 1348, 1353,    0, 1356,  319,
      317, 1353, 1348, 1361, 1356, 1355, 1362,    0,    0,    0,
        0, 1370,    0, 1377,    0,    0,    0, 1370, 1378,    0,
        0, 1371, 1375,    0, 1398,    0, 1409,    0, 1397, 1406,

     1394, 1401, 1406, 1399, 1415, 1414, 1406, 1407,    0, 1421,
     1409, 1415, 1413, 1414, 1424, 1425, 1426, 1435, 1432, 1433,
     1436, 1426, 1438, 1433,    0, 1450, 1445, 1470, 1459, 1472,
     1473, 1467, 1459, 1461, 1469, 1462, 1478, 1463, 1473, 1473,
     1473, 1485, 1480, 1472,    0, 1479,    0, 1479, 1484, 1485,
     1471, 1476, 1498, 1524, 1484, 1498, 1490, 1524, 1515, 1522,
        0,    0, 1513, 1525, 1523, 1530,  358,    0, 1535,    0,
     1526, 1520, 1527, 1541, 1539, 1527, 1530, 1544, 1543, 1548,
     1546, 1544, 1546, 1548,    0,    0, 1557, 1560,    0, 1579,
     2687,    0, 1579, 1609, 1610,  893, 1606,    0, 1564, 1588,

     1584, 1590,    0, 1591, 1578, 1574,    0, 1596, 2687, 1596,
     1599,    0, 1584, 1585, 1592, 1595, 1590, 1593, 1598, 1597,
        0, 1611,    0, 1603, 1600, 1619, 1614, 1641, 1625, 1625,
     1636, 1645, 1646, 1644, 1641, 1642, 1652, 1655, 1653, 1656,
     1643, 1654,    0,    0,  336,    0, 1657, 1660,    0,    0,
     1659, 1651, 1655, 1664,    0, 1665,    0,    0, 1654, 1655,
     1671, 1656, 1661, 1670,    0,    0,    0, 1680, 1689, 1701,
     1690,    0, 1696, 1692, 1707, 1709, 1706,    0, 1715, 1708,
     1700, 1710, 1711, 1707,    0,    0, 1710, 1703, 1705, 1707,
     1722, 1724,    0, 1723,    0,    0, 1726, 1716, 1714, 1729,

     1716, 1736, 1724, 1749, 1745, 1759,    0,    0, 1750, 1762,
     1768, 1766, 1752, 1753, 1773, 1766, 1771, 1776, 1772, 1776,
     1779, 1763, 1773, 1782, 1771, 1776, 1779, 1771, 1771, 1773,
     1778, 1774, 1783, 1795, 1807, 1812, 2687, 1821,    0, 1819,
     1802, 1816, 1814, 1825,  356,    0,    0, 1830, 1823, 1814,
     1820, 1834, 1822,    0,    0,    0, 1828, 1833,    0, 1825,
        0, 1826,    0, 1836,    0, 1822, 1840, 1839,    0, 1827,
     1839, 1848, 1829, 1832,    0, 1835,    0, 1839, 1861, 1871,
     1859, 1870, 1878, 1865, 1882,    0, 1886, 1880, 1887,    0,
     1890,    0, 1888,    0, 1879,    0, 1880, 1871,    0, 1878,

     1888, 1893,    0,    0, 1890,    0, 1882, 1900, 1897, 1898,
     1897, 1892, 1884, 1901, 1931, 1908, 1907,  309, 1927, 1926,
     1921,    0, 1940, 1918, 1945, 1942, 1939, 1940, 1925, 1931,
     1933, 1936, 1941,    0, 1951,    0,    0, 1952, 1953, 1956,
        0,    0,    0,    0, 1941,  306,    0, 1954, 1944, 1951,
        0, 1954, 1959, 1966, 1954, 1976, 1984, 1984, 1997, 1985,
     1993, 2020,    0, 2001, 2004, 2005, 1987, 1984, 1995, 1992,
     1991,    0, 1998,    0, 2008,    0, 2687, 1994, 2002,    0,
     2015, 1999, 2011, 2009,    0, 2019,    0,    0, 2018, 2019,
        0,    0, 2011, 2023, 2028,  349,  299, 2043, 2044, 2050,

     2054,    0,    0,    0,    0, 2052, 2045, 2040, 2043,    0,
        0,    0, 2044, 2056, 2065, 2063, 2047,    0, 2057,    0,
        0, 2057, 2069, 2052, 2058, 2062, 2061, 2071, 2077, 2067,
     2071, 2063,    0, 2082,    0, 2086, 2094,    0, 2092, 2097,
        0, 2096, 2106,    0, 2114,    0,    0,    0, 2098,    0,
     2108, 2100, 2108, 2104,    0, 2122, 2110, 2122, 2119,  239,
     2126, 2118, 2124, 2112, 2687, 2119, 2116, 2117, 2125, 2119,
     2133,    0, 2137,    0, 2141, 2143, 2144, 2146, 2164,    0,
     2158, 2154, 2155,  276, 2161, 2162,    0, 2687, 2175, 2161,
        0,  274,  260,    0, 2172, 2164, 2178,    0, 2169, 2167,

     2165, 2172, 2179,    0, 2184,    0,    0, 2172, 2176, 2172,
     2173, 2183, 2180, 2194, 2201,    0,  199,    0, 2195, 2208,
     2209, 2223, 2215, 2226,    0, 2224, 2229, 2219,    0, 2218,
        0, 2225, 2222,  194, 2229,    0,  191, 2235, 2218, 2239,
     2229,    0,    0,    0,    0,    0, 2227, 2222, 2245,    0,
     2244,    0, 2687,    0, 2230, 2252, 2245, 2236,    0, 2687,
     2687, 2237, 2243,    0, 2243, 2249, 2245, 2266, 2259, 2267,
     2279, 2287,    0, 2271, 2278,    0, 2292, 2293, 2277, 2273,
     2294,    0,    0, 2286, 2282, 2299,    0,    0, 2294, 2297,
     2300, 2300,  164, 2297,  181,    0, 2304,    0, 2291,    0,

     2292, 2300,    0, 2294, 2303, 2314, 2302, 2300, 2329, 2320,
     2339, 2342, 2342, 2329, 2330,    0,    0, 2349, 2336, 2340,
     2341,    0, 2353,    0,    0, 2340, 2344,    0, 2341, 2346,
     2344, 2348,    0, 2363, 2360, 2361, 2364, 2365, 2353, 2363,
        0, 2354, 2372,    0,    0,    0, 2379, 2356,    0, 2381,
     2383,  126,    0, 2387, 2390, 2384, 2386, 2403, 2402, 2399,
     2395, 2400,    0, 2396,    0, 2413, 2392, 2415, 2406,    0,
     2401, 2417, 2420, 2404,    0, 2412, 2413, 2409, 2415, 2414,
        0, 2412, 2415,    0,    0, 2423, 2423, 2449,    0, 2446,
     2455, 2442, 2459, 2444,    0,    0,    0, 2465, 2455,    0,

     2467, 2457, 2469,    0,   96, 2461, 2461, 2471, 2461, 2465,
     2463, 2461, 2460, 2465,    0, 2468, 2470, 2472, 2472,    0,
        0, 2484, 2483, 2489, 2473,    0,    0,    0, 2478,    0,
     2687, 2553, 2561, 2569, 2577, 2583, 2586, 2593, 2600, 2608,
      129, 2616, 2624, 2632,  106, 2639, 2646, 2654, 2662, 2670,
     2678
    } ;

static yyconst flex_int16_t yy_def[1252] =
    {   0,
     1231,    1, 1232, 1232,    1,    1, 1231, 1231, 1231, 1231,
     1231, 1233, 1234, 1231, 1231, 1235, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1236, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1238, 1231, 1231, 1231, 1237, 1231, 1233,
     1231, 1231, 1239, 1234, 1231, 1235, 1231, 1231, 1240, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1241, 1231,
     1231, 1231, 1231, 1231, 1231, 1242, 1236, 1243, 1244, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1231, 1237, 1237,

     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1245, 1237, 1237, 1237,
     1238, 1231, 1246, 1231, 1231, 1237, 1247, 1233, 1233, 1239,

     1248, 1235, 1235, 1240, 1249, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1241, 1231, 1242, 1231, 1243, 1231, 1244, 1231,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1231, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,

     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1245, 1237,
     1237, 1237, 1231, 1237, 1250, 1247, 1251, 1248, 1249, 1231,

     1231, 1231, 1231, 1231, 1237, 1237, 1237, 1237, 1231, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,

     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1231, 1237, 1237, 1247, 1250, 1248, 1251, 1237, 1237, 1237,

     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1231, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,

     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1231, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,

     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1231, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,

     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1231, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1231, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,

     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1231, 1237, 1237, 1237, 1237, 1237, 1237, 1231,
     1231, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,

     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,

     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
        0, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231
    } ;

static yyconst flex_int16_t yy_nxt[2771] =
    {   0,
        8,    9,   10,   11,   12,   13,    8,   14,   15,   16,
       14,   14,   17,   18,   19,   20,   21,   22,   22,   22,
       22,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,    8,    8,   54,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   55,   58,   58,   61,   67,   62,   81,   82,
       83,  127,   70,   68,   71,   71,   71,   71,   71,   71,

       72,   70,  136,   71,   71,   71,   71,   71,   71,   84,
       85,  389,   58,   58,   73,   73,   73,   73,   73,   73,
      127,   76,  156,   71,   71,   71,   71,   71,   71,   74,
       86,  136,  210,  210,  213,   88,   63,   69,   78,  216,
      128,  402,  182,  231,  231,   67,  218,  187,  129,   67,
     1212,  156,   68,  403,  130,   61,  203,   62,   74,   76,
      189,   71,   71,   71,   71,   71,   71,   78,  105,  128,
      110,  182,  146,   77,  111,  106,   78,  129,  112,  188,
     1173,   89,  107,  130,  113,  108,  147,  114,  109,  189,
      115,  965,  148, 1231,  190,   79,   69,  105, 1231,  110,

      204,  146,   77,  111,  106,   78,   63,  112,  188,  116,
      221,  107,  227,  113,  108,  147,  114,  109, 1131,  115,
      117,  148,  118,  190,   79,   91,  137,  119,  222,  228,
      138,  229,  120,   92,  192,   93,  223,   94,  116,  221,
       95,  227,   96,   97, 1231, 1094,  193,  193, 1092,  117,
      230,  118,  238, 1079,   91,  137,  119,  222,  228,  138,
      229,  120,   92,  121,   93,  223,   94,  122,  239,   95,
     1061,   96,   97,   98,  123,  210,  210,  124,  139,  230,
      125,  238,  140,  126, 1060,  193, 1053,  240,  141,   61,
      142,  199,  121, 1033,  143,   99,  122,  239,  144,  100,

      131,  132,  101,  123,  145,  102,  124,  139,  133,  125,
      103,  140,  126,  134,  135,  104,  240,  141,  149,  142,
      150,  153,  151,  143,   99,  152,  220,  144,  100,  131,
      132,  101,  183,  145,  102,  184,  185,  133,  154,  103,
      200,  155,  134,  135,  104,  186,  252,  149,  157,  150,
      153,  151,  158,  989,  152,  159,  796,  790,  160,  988,
      951,  183,  262,  931,  184,  185,  877,  154,  737,  224,
      155,  653,  225,  652,  186,  252,  235,  157,   62,  404,
      178,  158,  179,  236,  159,  180,  181,  160,  161,  237,
      162,  262,  163,  226,  609,  164,  232,  233,  224,  263,

      165,  225,  166,  167,  168,  235,  169,  170,  171,  178,
      234,  179,  236,  396,  180,  181,  241,  161,  237,  162,
      250,  163,  226,  242,  164,  232,  233,  395,  263,  165,
      251,  166,  167,  168,  172,  169,  170,  171,  173,  234,
      243,  174,  175,  260,  244,  241,  261,  266,  176,  250,
      601,  177,  242,   73,   73,   73,   73,   73,   73,  251,
      591,  253,  595,  172,   68,  580,  254,  173,   74,  243,
      174,  175,  260,  244,  499,  261,  266,  176,  206,  206,
      177,   91,  207,  207,  207,  207,  207,  207,  192,   92,
      253,  196,  267,   94,  264,  254,   95,   74,   96,   97,

       76,  398,   71,   71,   71,   71,   71,   71,  397,  265,
       91,   73,   73,   73,   73,   73,   73,   78,   92,  270,
      196,  267,   94,  264,  220,   95,   74,   96,   97,  208,
      208,  208,  208,  208,  208,  218,  216,  268,  265,  214,
      271,  273,  205,  274,  209,  597,   78,  272,  270,  275,
      276,  245,  211,  211,  269,   74,  212,  212,  212,  212,
      212,  212,  246,  247,  248,  255,  268,  277,  256,  271,
      273,  249,  274,  209,  257,  278,  272,  283,  275,  276,
      245,  258,  259,  269,  279,  281,  284,  285,  282,  201,
      292,  246,  247,  248,  255,  293,  277,  256,  280,  197,

      249,  294,  295,  257,  278,  195,  283,  296,  194,   80,
      258,  259,  297,  279,  281,  284,  285,  282,  286,  292,
      287,   75,   65,  298,  293,  299,  300,  280,  288,  289,
      294,  295,  308,  290,  291,  314,  296,  301,  306,  302,
      315,  297,  307,  312,  319,  309,  310,  286,  316,  287,
      303,  304,  298,  313,  299,  300,  311,  288,  289,  305,
      320,  308,  290,  291,  314,  321,  301,  306,  302,  315,
      322,  307,  312,  319,  309,  310,  317,  318,  326,  303,
      304,  339,  313,  323,  327,  311,  340,  324,  305,  320,
      341,  342,  328,  325,  321,  343,  349,  350,  355,  322,

      396,  351,  352,  356,  361,  317,  318,  326,   59, 1231,
      339,   57,  323,  327,  353,  340,  324,   57,  354,  341,
      342,  328,  325,  329,  343,  349,  350,  355,  330,  331,
      351,  352,  356,  361,  332,  365,  333,  344,  334,  335,
      359,  336,  337,  353,  338,  357,  345,  354,  346,  395,
      347,  360,  329,  381,  348,  366,  367,  330,  331, 1231,
      376,  384,  358,  332,  365,  333,  344,  334,  335,  359,
      336,  337,  377,  338,  357,  345,  362,  346,  368,  347,
      360,  363,  381,  348,  366,  367,  369,  364,  371,  376,
      384,  358,  387,  372,  388,  373,  374,  390,  370,  391,

      378,  377,  392,  375,  379,  362,  382,  368,  380,  385,
      363,  405,  383,  386,  398,  369,  364,  371,   61, 1231,
       62,  387,  372,  388,  373,  374,  390,  370,  391,  378,
     1231,  392,  375,  379,  192,  382,  224,  380,  385,  394,
      405,  383,  386,   61,   67,  396,  193,  193,   61,   67,
      199,   68,   67,  406,  407,  408,  398,  410,  397,  203,
      226, 1231,  411,  412,  413,  224, 1231,  414,  394,   63,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  406,  407,  408,  193,  410,  393, 1231,  226,
      409,  411,  412,  413,   63,   69,  414,  231,  231,  200,

       69, 1231,   68,  204,  208,  208,  208,  208,  208,  208,
      212,  212,  212,  212,  212,  212,  400,  400,  415,  209,
      401,  401,  401,  401,  401,  401,  212,  212,  212,  212,
      212,  212,  416,  417,  418,  419,  422,  420,  424,  425,
      423,  426,  428, 1231, 1231,  433,  397,  415,  209,  434,
      427,  435,  421,  436,  437,  438,  442,  429, 1231,  439,
     1231,  416,  417,  418,  419,  422,  420,  424,  425,  423,
      426,  428,  430,  431,  433,  432,  445,  446,  434,  427,
      435,  421,  436,  437,  438,  442,  429,  440,  439,  443,
      441,  447,  448,  444,  449,  450,  451,  452,  453,  454,

      455,  430,  431,  458,  432,  445,  446,  456,  457,  459,
      460,  461,  462,  464,  463,  465,  440,  466,  443,  441,
      447,  448,  444,  449,  450,  451,  452,  453,  454,  455,
      467,  468,  458,  469,  470,  471,  456,  457,  459,  460,
      461,  462,  464,  463,  465,  472,  466,  473,  474,  475,
      476,  477, 1231,  484,  485,  486,  487,  488,  490,  467,
      468,  491,  469,  470,  471,  492,  493,  478,  479,  494,
      480,  481,  497,  498,  472,  489,  473,  474,  475,  476,
      477,  482,  484,  485,  486,  487,  488,  490,  500,  495,
      491,  483,  501,  502,  492,  493,  503,  504,  494,  496,

      505,  497,  498,  506,  489,  507,  508,  509,  510,  512,
      482,  511,  513,  514,  515,  516,  517,  500,  495,  518,
      483,  501,  502,  519,  521,  503,  504,  522,  496,  505,
      520,  523,  506,  526,  507,  508,  509,  510,  512,  524,
      511,  513,  514,  515,  516,  517,  527,  525,  518,  528,
      529,  530,  519,  521,  532,  533,  522,  534,  531,  520,
      523,  535,  526,  536,  537,  538,  539,  540,  524,  541,
      542,  543,  544,  545,  546,  527,  525,  547,  528,  529,
      530,  548,  549,  532,  533,  550,  534,  531,  555, 1231,
      535,  556,  536,  537,  538,  539,  540,  557,  541,  542,

      543,  544,  545,  546,  551,  558,  547,  559,  560,  561,
      548,  549,  562,  563,  550,  564,  565,  555,  552,  566,
      556,  568,  553,  570,  573,  567,  557,  554,  574,  571,
      569,  572,  575,  551,  558,  576,  559,  560,  561,  577,
      578,  562,  563,  579,  564,  565,  581,  552,  566, 1231,
      568,  553,  570,  573,  567,  582,  583,  574,  571,  569,
      572,  575,  585,  586,  576,  588,  589,  587,  577,  578,
      590,  592,  579,  593,  598,  581,  599,  600,  584, 1231,
     1231, 1231, 1231, 1231,  582,  583, 1231, 1231, 1231, 1231,
     1231,  585,  586,  602,  588,  589,  587,  603,  604,  590,

      592,  605,  593,  598,  606,  599,  600,  584,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      607,  608,  602,  610,  611,  612,  603,  604,  613,  614,
      605,  615,  616,  606,  617,  618,  619,  620,  621,  622,
      623,  624,  625,  626,  629,  630,  631,  627,  632,  607,
      608,  633,  610,  611,  612,  628,  634,  613,  614,  635,
      615,  616,  636,  617,  618,  619,  620,  621,  622,  623,
      624,  625,  626,  629,  630,  631,  627,  632,  637,  638,
      633,  639,  640,  641,  642,  634,  643,  644,  635,  645,
      646,  636,  647,  648,  649,  650,  651,  654,  655,  656,

      657,  658,  659,  661,  663,  664,  660,  637,  638,  665,
      639,  640,  641,  642,  662,  643,  644,  666,  645,  646,
      667,  647,  648,  649,  650,  651,  654,  655,  656,  657,
      658,  659,  661,  663,  664,  660,  668,  669,  665,  671,
      672,  673,  674,  662,  675,  676,  666,  677,  678,  667,
      679,  680,  681,  682,  683,  670,  684,  685,  686,  687,
      688,  689,  690,  691,  692,  668,  669,  693,  671,  672,
      673,  674,  694,  675,  676,  695,  677,  678,  696,  679,
      680,  681,  682,  683,  670,  684,  685,  686,  687,  688,
      689,  690,  691,  692,  697,  698,  693,  699,  700,  701,

      702,  694,  703,  704,  695,  705,  706,  696,  707,  708,
      709,  710,  711,  712,  713,  714,  715,  716,  717,  718,
      719,  720,  721,  697,  698,  722,  699,  700,  701,  702,
      726,  703,  704,  727,  705,  706,  728,  707,  708,  709,
      710,  711,  712,  713,  714,  715,  716,  717,  718,  719,
      720,  721,  723,  724,  722,  729,  730,  731,  732,  726,
      733,  735,  727,  736,  738,  728,  739,  740,  741,  725,
      742,  734,  743,  744,  745,  746,  747,  750,  748,  751,
      752,  723,  724,  753,  729,  730,  731,  732,  754,  733,
      735,  755,  736,  738,  749,  739,  740,  741,  725,  742,

      734,  743,  744,  745,  746,  747,  750,  748,  751,  752,
      756,  757,  753,   62,  396,  398,  758,  754,  759,  760,
      755,  761,  762,  749,  481,  763,  764,  765,  766,  767,
     1231,  768,  769, 1231, 1231,  770,  771,  772,  773,  756,
      757,  774,  775,  776,  777,  758,  778,  759,  760,  779,
      761,  762,  782,  481,  763,  764,  765,  766,  767,  597,
      768,  769,  395,  595,  770,  771,  772,  773,  780,  783,
      774,  775,  776,  777,  784,  778,  785,  786,  779,  787,
      788,  782,  789,  790,  791,  792,  781,  793,  794,  795,
      797,  798,  799,  800,  801,  803,  804,  780,  783,  805,

      802,  806,  807,  784,  808,  785,  786,  809,  787,  788,
      810,  789,  790,  791,  792,  781,  793,  794,  795,  797,
      798,  799,  800,  801,  803,  804,  811,  812,  805,  802,
      806,  807,  813,  808,  814,  815,  809,  816,  817,  810,
      818,  819,  820,  821,  822,  823,  824,  825,  826,  827,
      828,  829,  830,  831,  832,  811,  812,  833,  834,  835,
      836,  813,  837,  814,  815,  838,  816,  817,  839,  818,
      819,  820,  821,  822,  823,  824,  825,  826,  827,  828,
      829,  830,  831,  832,  840,  841,  833,  834,  835,  836,
      842,  837,  843,  844,  838,  845,  846,  839,  847,  848,

      849,  850,  851,  852,  853,  854,  855,  856,  857,  858,
      859,  860,  861,  840,  841,  862,  863,  864,  865,  842,
      866,  843,  844,  867,  845,  846,  868,  847,  848,  849,
      850,  851,  852,  853,  854,  855,  856,  857,  858,  859,
      860,  861,  869,  870,  862,  863,  864,  865,  871,  866,
      872,  873,  867,  874,  875,  868,  876,  878,  879,  880,
      881,  882,  883,  884,  885,  886,  887,  888,  889,  890,
      891,  869,  870,  892,  893,  894,  895,  871,  896,  872,
      873,  897,  874,  875,  898,  876,  878,  879,  880,  881,
      882,  883,  884,  885,  886,  887,  888,  889,  890,  891,

      899,  900,  892,  893,  894,  895,  901,  896,  902,  903,
      897,  904,  905,  898,  906,  907,  908,  909,  910,  911,
      912,  913,  914,  915,  916,  917,  918,  919,  920,  899,
      900,  921,  922,  923,  924,  901,  925,  902,  903,  929,
      904,  905,  930,  906,  907,  908,  909,  910,  911,  912,
      913,  914,  915,  916,  917,  918,  919,  920,  932,  926,
      921,  922,  923,  924,  933,  925,  927,  934,  929,  935,
      936,  930,  937,  938,  939,  940,  941,  928,  942,  943,
      944,  945,  946,  947,  948,  949,  950,  932,  926,  952,
      953,  954,  955,  933,  956,  927,  934,  957,  935,  936,

      958,  937,  938,  939,  940,  941,  928,  942,  943,  944,
      945,  946,  947,  948,  949,  950,  959,  960,  952,  953,
      954,  955,  961,  956,  962,  963,  957,  964,  967,  958,
      965,  968,  969,  478,  970,  971,  972,  973,  974,  975,
      976,  977,  978,  979,  980,  959,  960,  981,  982,  983,
      984,  961,  985,  962,  963,  966,  964,  967,  986,  987,
      968,  969,  478,  970,  971,  972,  973,  974,  975,  976,
      977,  978,  979,  980,  990,  991,  981,  982,  983,  984,
      992,  985,  993,  994,  966,  995,  996,  986,  987,  997,
      998,  999, 1002, 1003, 1000, 1004, 1005, 1006, 1007, 1008,

     1009, 1010, 1011,  990,  991, 1001, 1012, 1013, 1016,  992,
     1014,  993,  994, 1017,  995,  996, 1015, 1018,  997,  998,
      999, 1002, 1003, 1000, 1004, 1005, 1006, 1007, 1008, 1009,
     1010, 1011, 1019, 1020, 1001, 1012, 1013, 1016, 1021, 1014,
     1022, 1023, 1017, 1024, 1025, 1015, 1018, 1026, 1027, 1028,
      479, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038,
     1039, 1019, 1020, 1040, 1041, 1042, 1043, 1021, 1044, 1022,
     1023, 1045, 1024, 1025, 1046, 1047, 1026, 1027, 1028,  479,
     1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039,
     1048, 1049, 1040, 1041, 1042, 1043, 1050, 1044, 1051, 1052,

     1045, 1054, 1055, 1046, 1047, 1056, 1059, 1062, 1063, 1064,
     1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1048,
     1049, 1057, 1058, 1074, 1075, 1050, 1076, 1051, 1052, 1077,
     1054, 1055, 1078, 1080, 1056, 1059, 1062, 1063, 1064, 1065,
     1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1081, 1082,
     1057, 1058, 1074, 1075, 1083, 1076, 1084, 1085, 1077, 1086,
     1087, 1078, 1080, 1088, 1089, 1090, 1091, 1093, 1095, 1096,
     1097, 1098, 1099, 1100, 1101, 1102, 1103, 1081, 1082, 1104,
     1105, 1106, 1107, 1083, 1108, 1084, 1085, 1109, 1086, 1087,
     1110, 1111, 1088, 1089, 1090, 1091, 1093, 1095, 1096, 1097,

     1098, 1099, 1100, 1101, 1102, 1103, 1112, 1113, 1104, 1105,
     1106, 1107, 1114, 1108, 1115, 1116, 1109, 1117, 1118, 1110,
     1111, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127,
     1128, 1129, 1130, 1132, 1133, 1112, 1113, 1134, 1135, 1136,
     1137, 1114, 1138, 1115, 1116, 1139, 1117, 1118, 1140, 1141,
     1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128,
     1129, 1130, 1132, 1133, 1142, 1143, 1134, 1135, 1136, 1137,
     1144, 1138, 1145, 1146, 1139, 1147, 1148, 1140, 1141, 1149,
     1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159,
     1160, 1161, 1162, 1142, 1143, 1163, 1164, 1165, 1166, 1144,

     1167, 1145, 1146, 1168, 1147, 1148, 1169, 1170, 1149, 1150,
     1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160,
     1161, 1162, 1171, 1172, 1163, 1164, 1165, 1166, 1174, 1167,
     1175, 1176, 1168, 1177, 1178, 1169, 1170, 1179, 1180, 1181,
     1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191,
     1192, 1171, 1172, 1193, 1194, 1195, 1196, 1174, 1197, 1175,
     1176, 1198, 1177, 1178, 1199, 1200, 1179, 1180, 1181, 1182,
     1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192,
     1201, 1202, 1193, 1194, 1195, 1196, 1203, 1197, 1204, 1205,
     1198, 1206, 1207, 1199, 1200, 1208, 1209, 1210, 1211, 1213,

     1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1201,
     1202, 1223, 1224, 1225, 1226, 1203, 1227, 1204, 1205, 1228,
     1206, 1207, 1229, 1230, 1208, 1209, 1210, 1211, 1213, 1214,
     1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1231, 1231,
     1223, 1224, 1225, 1226, 1231, 1227, 1231, 1231, 1228, 1231,
     1231, 1229, 1230,   56,   56,   56,   56,   56,   56,   56,
       56,   60,   60,   60,   60,   60,   60,   60,   60,   64,
     1231,   64,   64,   64,   64,   64,   64,   66,   66,   66,
       66,   66,   66,   66,   66,   87,   87,   87,   87,   87,
       87,   90,   90,  191,  191,  191,  191,  191,  191,  191,

      198,  198,  198,  198,  198,  198,  198,  198,  202,  202,
      202,  202,  202,  202,  202,  202,  215,  215, 1231,  215,
      215,  215,  215,  215,  217,  217,  217,  217, 1231,  217,
      217,  217,  219,  219,  219,  219,  219,  219,  219,  193,
      193,  193,  193,  193,  193,  193,  197, 1231,  197,  197,
      197,  197,  197,  197,  201, 1231,  201,  201,  201,  201,
      201,  201,  399, 1231,  399,  399,  399,  399,  399,  399,
      594, 1231,  594,  594,  594,  594,  594,  594,  596, 1231,
      596,  596,  596,  596,  596,  596,    7, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,

     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231
    } ;

static yyconst flex_int16_t yy_chk[2771] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    5,    6,   12,   16,   12,   24,   24,
       24,   34,   17,   16,   17,   17,   17,   17,   17,   17,

       18,   18,   37,   18,   18,   18,   18,   18,   18,   26,
       26, 1245,    5,    6,   19,   19,   19,   19,   19,   19,
       34,   22,   44,   22,   22,   22,   22,   22,   22,   19,
       27,   37,   77,   77, 1241,   27,   12,   16,   22,  215,
       35,  215,   49,   98,   98,   66,  217,   51,   35,   69,
     1205,   44,   66,  217,   35,   60,   69,   60,   19,   21,
       52,   21,   21,   21,   21,   21,   21,   22,   30,   35,
       31,   49,   41,   21,   31,   30,   21,   35,   31,   51,
     1152,   27,   30,   35,   31,   30,   41,   31,   30,   52,
       31, 1095,   41,   87,   53,   21,   66,   30,   87,   31,

       69,   41,   21,   31,   30,   21,   60,   31,   51,   32,
       91,   30,   94,   31,   30,   41,   31,   30, 1093,   31,
       32,   41,   32,   53,   21,   28,   38,   32,   92,   95,
       38,   96,   32,   28,   54,   28,   92,   28,   32,   91,
       28,   94,   28,   28,   87, 1037,   54,   54, 1034,   32,
       97,   32,  101, 1017,   28,   38,   32,   92,   95,   38,
       96,   32,   28,   33,   28,   92,   28,   33,  102,   28,
      993,   28,   28,   29,   33,  210,  210,   33,   39,   97,
       33,  101,   39,   33,  992,   54,  984,  103,   39,   63,
       40,   63,   33,  960,   40,   29,   33,  102,   40,   29,

       36,   36,   29,   33,   40,   29,   33,   39,   36,   33,
       29,   39,   33,   36,   36,   29,  103,   39,   42,   40,
       42,   43,   42,   40,   29,   42,  219,   40,   29,   36,
       36,   29,   50,   40,   29,   50,   50,   36,   43,   29,
       63,   43,   36,   36,   29,   50,  109,   42,   45,   42,
       43,   42,   45,  897,   42,   45,  645,  645,   45,  896,
      846,   50,  113,  818,   50,   50,  745,   43,  567,   93,
       43,  471,   93,  470,   50,  109,  100,   45,  197,  219,
       48,   45,   48,  100,   45,   48,   48,   45,   46,  100,
       46,  113,   46,   93,  421,   46,   99,   99,   93,  114,

       46,   93,   46,   46,   46,  100,   46,   46,   46,   48,
       99,   48,  100,  395,   48,   48,  105,   46,  100,   46,
      108,   46,   93,  105,   46,   99,   99,  197,  114,   46,
      108,   46,   46,   46,   47,   46,   46,   46,   47,   99,
      106,   47,   47,  112,  106,  105,  112,  116,   47,  108,
      408,   47,  105,   70,   70,   70,   70,   70,   70,  108,
      389,  110,  395,   47,  201,  381,  110,   47,   70,  106,
       47,   47,  112,  106,  305,  112,  116,   47,   74,   74,
       47,   58,   74,   74,   74,   74,   74,   74,  193,   58,
      110,   58,  117,   58,  115,  110,   58,   70,   58,   58,

       71,  397,   71,   71,   71,   71,   71,   71,  201,  115,
       58,   73,   73,   73,   73,   73,   73,   71,   58,  119,
       58,  117,   58,  115,   89,   58,   73,   58,   58,   76,
       76,   76,   76,   76,   76,   88,   86,  118,  115,   82,
      120,  121,   72,  122,   76,  397,   71,  120,  119,  123,
      124,  107,   78,   78,  118,   73,   78,   78,   78,   78,
       78,   78,  107,  107,  107,  111,  118,  125,  111,  120,
      121,  107,  122,   76,  111,  126,  120,  129,  123,  124,
      107,  111,  111,  118,  127,  128,  130,  132,  128,   68,
      135,  107,  107,  107,  111,  136,  125,  111,  127,   62,

      107,  137,  138,  111,  126,   57,  129,  139,   55,   23,
      111,  111,  139,  127,  128,  130,  132,  128,  133,  135,
      133,   20,   15,  140,  136,  140,  140,  127,  133,  133,
      137,  138,  143,  133,  133,  146,  139,  141,  142,  141,
      147,  139,  142,  145,  150,  144,  144,  133,  147,  133,
      141,  141,  140,  145,  140,  140,  144,  133,  133,  141,
      151,  143,  133,  133,  146,  152,  141,  142,  141,  147,
      153,  142,  145,  150,  144,  144,  148,  148,  155,  141,
      141,  158,  145,  154,  156,  144,  159,  154,  141,  151,
      160,  161,  156,  154,  152,  162,  164,  165,  168,  153,

      396,  166,  166,  169,  172,  148,  148,  155,   11,    7,
      158,    4,  154,  156,  167,  159,  154,    3,  167,  160,
      161,  156,  154,  157,  162,  164,  165,  168,  157,  157,
      166,  166,  169,  172,  157,  174,  157,  163,  157,  157,
      171,  157,  157,  167,  157,  170,  163,  167,  163,  396,
      163,  171,  157,  181,  163,  175,  175,  157,  157,    0,
      179,  183,  170,  157,  174,  157,  163,  157,  157,  171,
      157,  157,  179,  157,  170,  163,  173,  163,  177,  163,
      171,  173,  181,  163,  175,  175,  177,  173,  178,  179,
      183,  170,  185,  178,  186,  178,  178,  188,  177,  189,

      180,  179,  190,  178,  180,  173,  182,  177,  180,  184,
      173,  223,  182,  184,  398,  177,  173,  178,  198,    0,
      198,  185,  178,  186,  178,  178,  188,  177,  189,  180,
        0,  190,  178,  180,  191,  182,  196,  180,  184,  196,
      223,  182,  184,  199,  202,  199,  191,  191,  200,  203,
      200,  202,  204,  224,  227,  229,  203,  232,  398,  204,
      196,    0,  233,  234,  235,  196,    0,  236,  196,  198,
      206,  206,  206,  206,  206,  206,  207,  207,  207,  207,
      207,  207,  224,  227,  229,  191,  232,  191,    0,  196,
      231,  233,  234,  235,  199,  202,  236,  231,  231,  200,

      203,    0,  596,  204,  208,  208,  208,  208,  208,  208,
      211,  211,  211,  211,  211,  211,  209,  209,  238,  208,
      209,  209,  209,  209,  209,  209,  212,  212,  212,  212,
      212,  212,  239,  240,  241,  242,  243,  242,  244,  245,
      243,  246,  247,    0,    0,  249,  596,  238,  208,  250,
      246,  251,  242,  252,  252,  253,  256,  248,    0,  253,
        0,  239,  240,  241,  242,  243,  242,  244,  245,  243,
      246,  247,  248,  248,  249,  248,  258,  259,  250,  246,
      251,  242,  252,  252,  253,  256,  248,  255,  253,  257,
      255,  260,  262,  257,  263,  264,  265,  266,  267,  269,

      270,  248,  248,  272,  248,  258,  259,  271,  271,  273,
      274,  275,  276,  277,  276,  278,  255,  279,  257,  255,
      260,  262,  257,  263,  264,  265,  266,  267,  269,  270,
      280,  281,  272,  282,  283,  284,  271,  271,  273,  274,
      275,  276,  277,  276,  278,  285,  279,  286,  287,  288,
      289,  290,    0,  292,  293,  294,  295,  296,  297,  280,
      281,  298,  282,  283,  284,  299,  300,  291,  291,  301,
      291,  291,  303,  304,  285,  296,  286,  287,  288,  289,
      290,  291,  292,  293,  294,  295,  296,  297,  306,  302,
      298,  291,  308,  309,  299,  300,  310,  311,  301,  302,

      312,  303,  304,  313,  296,  314,  316,  317,  318,  319,
      291,  318,  320,  321,  321,  322,  323,  306,  302,  324,
      291,  308,  309,  325,  326,  310,  311,  327,  302,  312,
      325,  328,  313,  330,  314,  316,  317,  318,  319,  329,
      318,  320,  321,  321,  322,  323,  331,  329,  324,  332,
      333,  334,  325,  326,  335,  336,  327,  337,  334,  325,
      328,  338,  330,  339,  340,  341,  342,  343,  329,  344,
      345,  346,  347,  349,  350,  331,  329,  351,  332,  333,
      334,  352,  353,  335,  336,  354,  337,  334,  357,    0,
      338,  358,  339,  340,  341,  342,  343,  359,  344,  345,

      346,  347,  349,  350,  355,  361,  351,  362,  363,  364,
      352,  353,  365,  366,  354,  367,  368,  357,  355,  369,
      358,  370,  355,  371,  373,  369,  359,  355,  374,  372,
      370,  372,  375,  355,  361,  376,  362,  363,  364,  377,
      378,  365,  366,  380,  367,  368,  382,  355,  369,    0,
      370,  355,  371,  373,  369,  383,  383,  374,  372,  370,
      372,  375,  384,  385,  376,  386,  387,  385,  377,  378,
      388,  391,  380,  392,  405,  382,  406,  407,  383,    0,
        0,    0,    0,    0,  383,  383,    0,    0,    0,    0,
        0,  384,  385,  410,  386,  387,  385,  411,  412,  388,

      391,  413,  392,  405,  414,  406,  407,  383,  400,  400,
      400,  400,  400,  400,  401,  401,  401,  401,  401,  401,
      417,  419,  410,  422,  423,  424,  411,  412,  425,  426,
      413,  427,  428,  414,  429,  430,  431,  432,  433,  434,
      435,  436,  437,  438,  440,  441,  442,  439,  443,  417,
      419,  444,  422,  423,  424,  439,  445,  425,  426,  446,
      427,  428,  447,  429,  430,  431,  432,  433,  434,  435,
      436,  437,  438,  440,  441,  442,  439,  443,  448,  451,
      444,  453,  455,  456,  458,  445,  459,  460,  446,  461,
      462,  447,  463,  465,  466,  467,  469,  472,  473,  474,

      475,  476,  477,  482,  484,  488,  477,  448,  451,  489,
      453,  455,  456,  458,  482,  459,  460,  492,  461,  462,
      493,  463,  465,  466,  467,  469,  472,  473,  474,  475,
      476,  477,  482,  484,  488,  477,  495,  497,  489,  499,
      500,  501,  502,  482,  503,  504,  492,  505,  506,  493,
      507,  508,  510,  511,  512,  497,  512,  513,  514,  515,
      516,  517,  518,  519,  520,  495,  497,  521,  499,  500,
      501,  502,  522,  503,  504,  523,  505,  506,  524,  507,
      508,  510,  511,  512,  497,  512,  513,  514,  515,  516,
      517,  518,  519,  520,  526,  527,  521,  528,  529,  530,

      531,  522,  532,  533,  523,  534,  535,  524,  536,  537,
      538,  539,  540,  541,  542,  543,  544,  546,  548,  549,
      550,  551,  552,  526,  527,  553,  528,  529,  530,  531,
      555,  532,  533,  556,  534,  535,  557,  536,  537,  538,
      539,  540,  541,  542,  543,  544,  546,  548,  549,  550,
      551,  552,  554,  554,  553,  558,  559,  560,  563,  555,
      564,  565,  556,  566,  569,  557,  571,  572,  573,  554,
      574,  564,  575,  576,  577,  578,  579,  581,  580,  582,
      583,  554,  554,  584,  558,  559,  560,  563,  587,  564,
      565,  588,  566,  569,  580,  571,  572,  573,  554,  574,

      564,  575,  576,  577,  578,  579,  581,  580,  582,  583,
      590,  593,  584,  594,  595,  597,  599,  587,  600,  601,
      588,  602,  604,  580,  605,  606,  608,  610,  611,  613,
        0,  614,  615,    0,    0,  616,  617,  618,  619,  590,
      593,  620,  622,  624,  625,  599,  626,  600,  601,  627,
      602,  604,  629,  605,  606,  608,  610,  611,  613,  597,
      614,  615,  594,  595,  616,  617,  618,  619,  628,  630,
      620,  622,  624,  625,  631,  626,  632,  633,  627,  634,
      635,  629,  636,  637,  638,  639,  628,  640,  641,  642,
      647,  648,  651,  652,  653,  654,  656,  628,  630,  659,

      653,  660,  661,  631,  662,  632,  633,  663,  634,  635,
      664,  636,  637,  638,  639,  628,  640,  641,  642,  647,
      648,  651,  652,  653,  654,  656,  668,  669,  659,  653,
      660,  661,  670,  662,  671,  673,  663,  674,  675,  664,
      676,  677,  679,  680,  681,  682,  683,  684,  687,  688,
      689,  690,  691,  692,  694,  668,  669,  697,  698,  699,
      700,  670,  701,  671,  673,  702,  674,  675,  703,  676,
      677,  679,  680,  681,  682,  683,  684,  687,  688,  689,
      690,  691,  692,  694,  704,  705,  697,  698,  699,  700,
      706,  701,  709,  710,  702,  711,  712,  703,  713,  714,

      715,  716,  717,  718,  719,  720,  721,  722,  723,  724,
      725,  726,  727,  704,  705,  728,  729,  730,  731,  706,
      732,  709,  710,  733,  711,  712,  734,  713,  714,  715,
      716,  717,  718,  719,  720,  721,  722,  723,  724,  725,
      726,  727,  735,  736,  728,  729,  730,  731,  738,  732,
      740,  741,  733,  742,  743,  734,  744,  748,  749,  750,
      751,  752,  753,  757,  758,  760,  762,  764,  766,  767,
      768,  735,  736,  770,  771,  772,  773,  738,  774,  740,
      741,  776,  742,  743,  778,  744,  748,  749,  750,  751,
      752,  753,  757,  758,  760,  762,  764,  766,  767,  768,

      779,  780,  770,  771,  772,  773,  781,  774,  782,  783,
      776,  784,  785,  778,  787,  788,  789,  791,  793,  795,
      797,  798,  800,  801,  802,  805,  807,  808,  809,  779,
      780,  810,  811,  812,  813,  781,  814,  782,  783,  816,
      784,  785,  817,  787,  788,  789,  791,  793,  795,  797,
      798,  800,  801,  802,  805,  807,  808,  809,  819,  815,
      810,  811,  812,  813,  820,  814,  815,  821,  816,  823,
      824,  817,  825,  826,  827,  828,  829,  815,  830,  831,
      832,  833,  835,  838,  839,  840,  845,  819,  815,  848,
      849,  850,  852,  820,  853,  815,  821,  854,  823,  824,

      855,  825,  826,  827,  828,  829,  815,  830,  831,  832,
      833,  835,  838,  839,  840,  845,  856,  857,  848,  849,
      850,  852,  858,  853,  859,  860,  854,  861,  864,  855,
      862,  865,  866,  867,  868,  869,  870,  871,  873,  875,
      878,  879,  881,  882,  883,  856,  857,  884,  886,  889,
      890,  858,  893,  859,  860,  862,  861,  864,  894,  895,
      865,  866,  867,  868,  869,  870,  871,  873,  875,  878,
      879,  881,  882,  883,  898,  899,  884,  886,  889,  890,
      900,  893,  901,  906,  862,  907,  908,  894,  895,  909,
      913,  914,  916,  917,  915,  919,  922,  923,  924,  925,

      926,  927,  928,  898,  899,  915,  929,  930,  932,  900,
      931,  901,  906,  934,  907,  908,  931,  936,  909,  913,
      914,  916,  917,  915,  919,  922,  923,  924,  925,  926,
      927,  928,  937,  939,  915,  929,  930,  932,  940,  931,
      942,  943,  934,  945,  949,  931,  936,  951,  952,  953,
      954,  956,  957,  958,  959,  961,  962,  963,  964,  966,
      967,  937,  939,  968,  969,  970,  971,  940,  973,  942,
      943,  975,  945,  949,  976,  977,  951,  952,  953,  954,
      956,  957,  958,  959,  961,  962,  963,  964,  966,  967,
      978,  979,  968,  969,  970,  971,  981,  973,  982,  983,

      975,  985,  986,  976,  977,  989,  990,  995,  996,  997,
      999, 1000, 1001, 1002, 1003, 1005, 1008, 1009, 1010,  978,
      979,  989,  989, 1011, 1012,  981, 1013,  982,  983, 1014,
      985,  986, 1015, 1019,  989,  990,  995,  996,  997,  999,
     1000, 1001, 1002, 1003, 1005, 1008, 1009, 1010, 1020, 1021,
      989,  989, 1011, 1012, 1022, 1013, 1023, 1024, 1014, 1026,
     1027, 1015, 1019, 1028, 1030, 1032, 1033, 1035, 1038, 1039,
     1040, 1041, 1047, 1048, 1049, 1051, 1055, 1020, 1021, 1056,
     1057, 1058, 1062, 1022, 1063, 1023, 1024, 1065, 1026, 1027,
     1066, 1067, 1028, 1030, 1032, 1033, 1035, 1038, 1039, 1040,

     1041, 1047, 1048, 1049, 1051, 1055, 1068, 1069, 1056, 1057,
     1058, 1062, 1070, 1063, 1071, 1072, 1065, 1074, 1075, 1066,
     1067, 1077, 1078, 1079, 1080, 1081, 1084, 1085, 1086, 1089,
     1090, 1091, 1092, 1094, 1097, 1068, 1069, 1099, 1101, 1102,
     1104, 1070, 1105, 1071, 1072, 1106, 1074, 1075, 1107, 1108,
     1077, 1078, 1079, 1080, 1081, 1084, 1085, 1086, 1089, 1090,
     1091, 1092, 1094, 1097, 1109, 1110, 1099, 1101, 1102, 1104,
     1111, 1105, 1112, 1113, 1106, 1114, 1115, 1107, 1108, 1118,
     1119, 1120, 1121, 1123, 1126, 1127, 1129, 1130, 1131, 1132,
     1134, 1135, 1136, 1109, 1110, 1137, 1138, 1139, 1140, 1111,

     1142, 1112, 1113, 1143, 1114, 1115, 1147, 1148, 1118, 1119,
     1120, 1121, 1123, 1126, 1127, 1129, 1130, 1131, 1132, 1134,
     1135, 1136, 1150, 1151, 1137, 1138, 1139, 1140, 1154, 1142,
     1155, 1156, 1143, 1157, 1158, 1147, 1148, 1159, 1160, 1161,
     1162, 1164, 1166, 1167, 1168, 1169, 1171, 1172, 1173, 1174,
     1176, 1150, 1151, 1177, 1178, 1179, 1180, 1154, 1182, 1155,
     1156, 1183, 1157, 1158, 1186, 1187, 1159, 1160, 1161, 1162,
     1164, 1166, 1167, 1168, 1169, 1171, 1172, 1173, 1174, 1176,
     1188, 1190, 1177, 1178, 1179, 1180, 1191, 1182, 1192, 1193,
     1183, 1194, 1198, 1186, 1187, 1199, 1201, 1202, 1203, 1206,

     1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1216, 1188,
     1190, 1217, 1218, 1219, 1222, 1191, 1223, 1192, 1193, 1224,
     1194, 1198, 1225, 1229, 1199, 1201, 1202, 1203, 1206, 1207,
     1208, 1209, 1210, 1211, 1212, 1213, 1214, 1216,    0,    0,
     1217, 1218, 1219, 1222,    0, 1223,    0,    0, 1224,    0,
        0, 1225, 1229, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1234,
        0, 1234, 1234, 1234, 1234, 1234, 1234, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1236, 1236, 1236, 1236, 1236,
     1236, 1237, 1237, 1238, 1238, 1238, 1238, 1238, 1238, 1238,

     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1242, 1242,    0, 1242,
     1242, 1242, 1242, 1242, 1243, 1243, 1243, 1243,    0, 1243,
     1243, 1243, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1246,
     1246, 1246, 1246, 1246, 1246, 1246, 1247,    0, 1247, 1247,
     1247, 1247, 1247, 1247, 1248,    0, 1248, 1248, 1248, 1248,
     1248, 1248, 1249,    0, 1249, 1249, 1249, 1249, 1249, 1249,
     1250,    0, 1250, 1250, 1250, 1250, 1250, 1250, 1251,    0,
     1251, 1251, 1251, 1251, 1251, 1251, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,

     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[296] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "sql.l"
/*
 * Scanner for mysql subset, GLR version
 */
#line 9 "sql.l"
#include <stdarg.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <malloc.h>
#include "sql.tab.hpp"
#include "../ast_node/ast_node.h"
int oldstate;
extern void yyerror(struct ParseResult *pp,const char *s, ...);
void GetCorrectString(char *dest, const char *src);



#line 1504 "lex.yy.c"

#define INITIAL 0
#define COMMENT 1
#define BTWMODE 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (yyscan_t yyscanner );

int yyget_debug (yyscan_t yyscanner );

void yyset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra (yyscan_t yyscanner );

void yyset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *yyget_in (yyscan_t yyscanner );

void yyset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *yyget_out (yyscan_t yyscanner );

void yyset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t yyget_leng (yyscan_t yyscanner );

char *yyget_text (yyscan_t yyscanner );

int yyget_lineno (yyscan_t yyscanner );

void yyset_lineno (int line_number ,yyscan_t yyscanner );

int yyget_column  (yyscan_t yyscanner );

void yyset_column (int column_no ,yyscan_t yyscanner );

YYSTYPE * yyget_lval (yyscan_t yyscanner );

void yyset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (yyscan_t yyscanner );
#else
extern int yywrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param ,yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 25 "sql.l"


struct ParseResult *pp =(struct ParseResult *) yyextra;

  /* keywords */

#line 1750 "lex.yy.c"

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		yy_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1232 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2687 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 31 "sql.l"
{ return ADD; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 32 "sql.l"
{ return ALL; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 33 "sql.l"
{ return ALTER; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 34 "sql.l"
{ return ANALYZE; }
	YY_BREAK
/* Hack for BETWEEN ... AND ... 
   * return special AND token if BETWEEN seen
   */
case 5:
YY_RULE_SETUP
#line 39 "sql.l"
{ BEGIN INITIAL; return AND; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 40 "sql.l"
{ return ANDOP; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 41 "sql.l"
{ return ANY; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 42 "sql.l"
{ return APPEND; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 43 "sql.l"
{ return AS; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 44 "sql.l"
{ return ASC; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 45 "sql.l"
{ return AUTO_INCREMENT; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 46 "sql.l"
{ return BEFORE; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 47 "sql.l"
{ BEGIN BTWMODE; return BETWEEN; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 48 "sql.l"
{ return BIGINT; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 49 "sql.l"
{ return BINARY; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 50 "sql.l"
{ return BIT; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 51 "sql.l"
{ return BLOB; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 52 "sql.l"
{ return BOTH; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 53 "sql.l"
{ return BTREE;}	
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 54 "sql.l"
{ return BY; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 55 "sql.l"
{ return CALL; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 56 "sql.l"
{ return CASCADE; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 57 "sql.l"
{ return CASE; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 58 "sql.l"
{ return CHANGE; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 59 "sql.l"
{ return CHAR; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 60 "sql.l"
{ return CHECK; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 61 "sql.l"
{ return COLLATE; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 62 "sql.l"
{ return COLUMN; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 63 "sql.l"
{ return COMMENT; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 64 "sql.l"
{ return CONDITION; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 65 "sql.l"
{ return CONSTRAINT; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 66 "sql.l"
{ return CONTINUE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 67 "sql.l"
{ return CONVERT; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 68 "sql.l"
{ return CREATE; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 69 "sql.l"
{ return CROSS; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 70 "sql.l"
{ return CURRENT_DATE; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 71 "sql.l"
{ return CURRENT_TIME; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 72 "sql.l"
{ return CURRENT_TIMESTAMP; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 73 "sql.l"
{ return CURRENT_USER; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 74 "sql.l"
{ return CURSOR; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 75 "sql.l"
{ return DATABASE; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 76 "sql.l"
{ return DATABASES; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 77 "sql.l"
{ return DAY;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 78 "sql.l"
{ return DATE; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 79 "sql.l"
{ return DATETIME; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 80 "sql.l"
{ return DAY_HOUR; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 81 "sql.l"
{ return DAY_MICROSECOND; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 82 "sql.l"
{ return DAY_MINUTE; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 83 "sql.l"
{ return DAY_SECOND; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 84 "sql.l"
{ return DECIMAL; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 85 "sql.l"
{ return DECLARE; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 86 "sql.l"
{ return DEFAULT; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 87 "sql.l"
{ return DELAYED; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 88 "sql.l"
{ return DELETE; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 89 "sql.l"
{ return DESC; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 90 "sql.l"
{ return DESCRIBE; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 91 "sql.l"
{ return DETERMINISTIC; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 92 "sql.l"
{ return DISTINCT; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 93 "sql.l"
{ return DISTINCTROW; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 94 "sql.l"
{ return DIV; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 95 "sql.l"
{ return DOUBLE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 96 "sql.l"
{ return DROP; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 97 "sql.l"
{ return DUAL; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 98 "sql.l"
{ return EACH; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 99 "sql.l"
{ return ELSE; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 100 "sql.l"
{ return ELSEIF; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 101 "sql.l"
{ return END; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 102 "sql.l"
{ return ENUM; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 103 "sql.l"
{ return ESCAPED; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 104 "sql.l"
{ return EXISTS; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 105 "sql.l"
{ return EXIT; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 106 "sql.l"
{ return EXPLAIN; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 107 "sql.l"
{ return FETCH; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 108 "sql.l"
{ return FLOAT; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 109 "sql.l"
{ return FOR; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 110 "sql.l"
{ return FORCE; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 111 "sql.l"
{ return FOREIGN; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 112 "sql.l"
{ return FROM; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 113 "sql.l"
{ return FULL; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 114 "sql.l"
{ return FULLTEXT; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 115 "sql.l"
{ return GRANT; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 116 "sql.l"
{ return GROUP; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 117 "sql.l"
{ return HASH; }	
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 118 "sql.l"
{ return HAVING; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 119 "sql.l"
{ return HIGH_PRIORITY; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 120 "sql.l"
{ return HOUR_MICROSECOND; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 121 "sql.l"
{ return HOUR_MINUTE; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 122 "sql.l"
{ return HOUR_SECOND; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 123 "sql.l"
{ return IF; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 124 "sql.l"
{ return IGNORE; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 125 "sql.l"
{ return IN; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 126 "sql.l"
{ return INFILE; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 127 "sql.l"
{ return INNER; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 128 "sql.l"
{ return INOUT; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 129 "sql.l"
{ return INSENSITIVE; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 130 "sql.l"
{ return INSERT; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 131 "sql.l"
{ return INTEGER; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 132 "sql.l"
{ return INTERVAL; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 133 "sql.l"
{ return INTO; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 134 "sql.l"
{ return IS; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 135 "sql.l"
{ return ITERATE; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 136 "sql.l"
{ return JOIN; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 137 "sql.l"
{ return INDEX; }	
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 138 "sql.l"
{ return KEY; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 139 "sql.l"
{ return KEYS; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 140 "sql.l"
{ return KILL; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 141 "sql.l"
{ return LEADING; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 142 "sql.l"
{ return LEAVE; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 143 "sql.l"
{ return LEFT; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 144 "sql.l"
{ return LIKE; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 145 "sql.l"
{ return LIMIT; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 146 "sql.l"
{ return LINES; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 147 "sql.l"
{ return LOAD; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 148 "sql.l"
{ return LOCALTIME; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 149 "sql.l"
{ return LOCALTIMESTAMP; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 150 "sql.l"
{ return LOCK; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 151 "sql.l"
{ return LONG; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 152 "sql.l"
{ return LONGBLOB; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 153 "sql.l"
{ return LONGTEXT; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 154 "sql.l"
{ return LOOP; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 155 "sql.l"
{ return LOW_PRIORITY; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 156 "sql.l"
{ return MATCH; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 157 "sql.l"
{ return MEDIUMBLOB; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 158 "sql.l"
{ return MEDIUMINT; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 159 "sql.l"
{ return MEDIUMTEXT; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 160 "sql.l"
{ return MINUTE_MICROSECOND; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 161 "sql.l"
{ return MINUTE_SECOND; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 162 "sql.l"
{ return MOD; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 163 "sql.l"
{ return MODIFIES; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 164 "sql.l"
{ return NATURAL; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 165 "sql.l"
{ return NOT; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 166 "sql.l"
{ return NO_WRITE_TO_BINLOG; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 167 "sql.l"
{ return NULLX; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 168 "sql.l"
{ return NUMBER; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 169 "sql.l"
{ return ON; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 170 "sql.l"
{ return DUPLICATE; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 171 "sql.l"
{ return OPTIMIZE; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 172 "sql.l"
{ return OPTION; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 173 "sql.l"
{ return OPTIONALLY; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 174 "sql.l"
{ return OR; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 175 "sql.l"
{ return ORDER; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 176 "sql.l"
{ return OUT; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 177 "sql.l"
{ return OUTER; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 178 "sql.l"
{ return OUTFILE; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 179 "sql.l"
{ return PARTITIONED; }	
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 180 "sql.l"
{ return PRECISION; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 181 "sql.l"
{ return PRIMARY; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 182 "sql.l"
{ return PROCEDURE; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 183 "sql.l"
{ return PROJECTION; }	
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 184 "sql.l"
{ return PURGE; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 185 "sql.l"
{ return QUICK; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 186 "sql.l"
{ return QUARTER;}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 187 "sql.l"
{ return READ; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 188 "sql.l"
{ return READS; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 189 "sql.l"
{ return REAL; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 190 "sql.l"
{ return REFERENCES; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 191 "sql.l"
{ return REGEXP; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 192 "sql.l"
{ return RELEASE; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 193 "sql.l"
{ return RENAME; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 194 "sql.l"
{ return REPEAT; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 195 "sql.l"
{ return REPLACE; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 196 "sql.l"
{ return REQUIRE; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 197 "sql.l"
{ return RESTRICT; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 198 "sql.l"
{ return RETURN; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 199 "sql.l"
{ return REVOKE; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 200 "sql.l"
{ return RIGHT; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 201 "sql.l"
{ return ROLLUP; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 202 "sql.l"
{ return SAMPLE; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 203 "sql.l"
{ return SCHEMA; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 204 "sql.l"
{ return SCHEMAS; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 205 "sql.l"
{ return SECOND_MICROSECOND; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 206 "sql.l"
{ return SELECT; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 207 "sql.l"
{ return SENSITIVE; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 208 "sql.l"
{ return SEPARATOR; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 209 "sql.l"
{ return SET; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 210 "sql.l"
{ return SHOW; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 211 "sql.l"
{ return SMALLINT; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 212 "sql.l"
{ return SOME; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 213 "sql.l"
{ return SONAME; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 214 "sql.l"
{ return SPATIAL; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 215 "sql.l"
{ return SPECIFIC; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 216 "sql.l"
{ return SQL; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 217 "sql.l"
{ return SQLEXCEPTION; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 218 "sql.l"
{ return SQLSTATE; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 219 "sql.l"
{ return SQLWARNING; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 220 "sql.l"
{ return SQL_BIG_RESULT; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 221 "sql.l"
{ return SQL_CALC_FOUND_ROWS; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 222 "sql.l"
{ return SQL_SMALL_RESULT; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 223 "sql.l"
{ return SSL; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 224 "sql.l"
{ return STARTING; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 225 "sql.l"
{ return STRAIGHT_JOIN; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 226 "sql.l"
{ return TABLE; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 227 "sql.l"
{ return TABLES; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 228 "sql.l"
{ return TEMPORARY; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 229 "sql.l"
{ return TERMINATED; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 230 "sql.l"
{ return TEXT; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 231 "sql.l"
{ return THEN; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 232 "sql.l"
{ return TIME; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 233 "sql.l"
{ return TIMESTAMP; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 234 "sql.l"
{ return TINYINT; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 235 "sql.l"
{ return TINYTEXT; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 236 "sql.l"
{ return TO; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 237 "sql.l"
{ return TRAILING; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 238 "sql.l"
{ return TRIGGER; }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 239 "sql.l"
{ return TRUNCATE; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 240 "sql.l"
{ return UNDO; }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 241 "sql.l"
{ return UNION; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 242 "sql.l"
{ return UNIQUE; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 243 "sql.l"
{ return UNLOCK; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 244 "sql.l"
{ return UNSIGNED; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 245 "sql.l"
{ return UPDATE; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 246 "sql.l"
{ return USAGE; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 247 "sql.l"
{ return USE; }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 248 "sql.l"
{ return USING; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 249 "sql.l"
{ return UTC_DATE; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 250 "sql.l"
{ return UTC_TIME; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 251 "sql.l"
{ return UTC_TIMESTAMP; }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 252 "sql.l"
{ return VALUES; }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 253 "sql.l"
{ return VARBINARY; }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 254 "sql.l"
{ return VARCHAR; }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 255 "sql.l"
{ return VARYING; }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 256 "sql.l"
{ return WHEN; }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 257 "sql.l"
{ return WHERE; }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 258 "sql.l"
{ return WEEK;}
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 259 "sql.l"
{ return WHILE; }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 260 "sql.l"
{ return WITH; }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 261 "sql.l"
{ return WRITE; }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 262 "sql.l"
{ return XOR; }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 263 "sql.l"
{ return YEAR; }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 264 "sql.l"
{ return YEAR_MONTH; }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 265 "sql.l"
{ return ZEROFILL; }
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 266 "sql.l"
{ return BEGINT; }
	YY_BREAK
/* numbers */
case 233:
YY_RULE_SETUP
#line 271 "sql.l"
{ yylval->strval = strdup(yytext); return INTNUM; } 	// 2014-4-14---save int value in string type
	YY_BREAK
case 234:
#line 275 "sql.l"
case 235:
#line 276 "sql.l"
case 236:
#line 277 "sql.l"
case 237:
#line 278 "sql.l"
case 238:
YY_RULE_SETUP
#line 279 "sql.l"
{ yylval->strval = strdup(yytext); return APPROXNUM; }	// 2014-4-14---save double value in string type
	YY_BREAK
/* booleans */	// 2014-4-14---save bool value in string type
case 239:
YY_RULE_SETUP
#line 283 "sql.l"
{ yylval->strval = "1"; return BOOL; }
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 284 "sql.l"
{ yylval->strval = "-1"; return BOOL; }	// 2014-4-14---not supported now---Yu
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 285 "sql.l"
{ yylval->strval = "0"; return BOOL; }
	YY_BREAK
/* strings */
case 242:
#line 291 "sql.l"
case 243:
YY_RULE_SETUP
#line 291 "sql.l"
{
	char *temp = strdup(yytext); 
	yylval->strval = strdup(yytext);
		
	GetCorrectString(yylval->strval, temp);	
	
	return STRING;
}
	YY_BREAK
case 244:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 300 "sql.l"
{ yyerror(pp,"Unterminated string %s", yytext); }
	YY_BREAK
case 245:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 301 "sql.l"
{ yyerror(pp,"Unterminated string %s", yytext); }
	YY_BREAK
/* hex strings */
case 246:
#line 305 "sql.l"
case 247:
YY_RULE_SETUP
#line 305 "sql.l"
{ yylval->strval = strdup(yytext); return STRING; }
	YY_BREAK
/* bit strings */
case 248:
#line 310 "sql.l"
case 249:
YY_RULE_SETUP
#line 310 "sql.l"
{ yylval->strval = strdup(yytext); return STRING; }
	YY_BREAK
/* operators */
case 250:
YY_RULE_SETUP
#line 314 "sql.l"
{ return yytext[0]; }
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 316 "sql.l"
{ return ANDOP; }
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 317 "sql.l"
{ return OR; }
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 319 "sql.l"
{ yylval->subtok = 1; return COMPARISON; }
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 320 "sql.l"
{ yylval->subtok = 2; return COMPARISON; }
	YY_BREAK
case 255:
#line 322 "sql.l"
case 256:
YY_RULE_SETUP
#line 322 "sql.l"
{ yylval->subtok = 3; return COMPARISON; }
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 323 "sql.l"
{ yylval->subtok = 4; return COMPARISON; }
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 324 "sql.l"
{ yylval->subtok = 5; return COMPARISON; }
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 325 "sql.l"
{ yylval->subtok = 6; return COMPARISON; }
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 326 "sql.l"
{ yylval->subtok = 7; return COMPARISON; }
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 327 "sql.l"
{ yylval->subtok = 12; return COMPARISON; }
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 329 "sql.l"
{ yylval->subtok = 1; return SHIFT; }
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 330 "sql.l"
{ yylval->subtok = 2; return SHIFT; }
	YY_BREAK
/* functions */
case 264:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 334 "sql.l"
{ return FSUBSTRING; }
	YY_BREAK
case 265:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 335 "sql.l"
{ return FTRIM; }
	YY_BREAK
case 266:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 336 "sql.l"
{ return FDATE_ADD; }
	YY_BREAK
case 267:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 337 "sql.l"
{ return FDATE_SUB; }
	YY_BREAK
case 268:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 338 "sql.l"
{ return FUPPER; }//---3.25fzh---
	YY_BREAK
case 269:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 339 "sql.l"
{ return FCOALESCE; }
	YY_BREAK
case 270:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 340 "sql.l"
{ return FCAST; }
	YY_BREAK
case 271:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 341 "sql.l"
{ return FCONVERT; }
	YY_BREAK
/* 
         * peek ahead and return function if name(
         */
/* 
        ---2.18add aggrection functions
         */
case 272:
YY_RULE_SETUP
#line 348 "sql.l"
{ int c = yyinput(pp->yyscan_info_); unput(c);
           if(c == '(') return FCOUNT;
           yylval->strval = strdup(yytext);
           return NAME; }
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 352 "sql.l"
{ int c = yyinput(pp->yyscan_info_); unput(c);
           if(c == '(') return FSUM;
           yylval->strval = strdup(yytext);
           return NAME; }           
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 356 "sql.l"
{ int c = yyinput(pp->yyscan_info_); unput(c);
           if(c == '(') return FAVG;
           yylval->strval = strdup(yytext);
           return NAME; }
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 360 "sql.l"
{ int c = yyinput(pp->yyscan_info_); unput(c);
           if(c == '(') return FMIN;
           yylval->strval = strdup(yytext);
           return NAME; }
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 364 "sql.l"
{ int c = yyinput(pp->yyscan_info_); unput(c);
           if(c == '(') return FMAX;
           yylval->strval = strdup(yytext);
           return NAME; } 
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 369 "sql.l"
{ yylval->strval = strdup(yytext);
                          return NAME; }
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 371 "sql.l"
{ yylval->strval = strdup(yytext+1);
                          yylval->strval[yyleng-2] = 0;
                          return NAME; }
	YY_BREAK
case 279:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 375 "sql.l"
{ yyerror(pp,"unterminated quoted name %s", yytext); }
	YY_BREAK
/* user variables */
case 280:
#line 379 "sql.l"
case 281:
#line 380 "sql.l"
case 282:
#line 381 "sql.l"
case 283:
YY_RULE_SETUP
#line 381 "sql.l"
{ yylval->strval = strdup(yytext+1); return USERVAR; }
	YY_BREAK
case 284:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 383 "sql.l"
{ yyerror(pp,"unterminated quoted user variable %s", yytext); }
	YY_BREAK
case 285:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 384 "sql.l"
{ yyerror(pp,"unterminated quoted user variable %s", yytext); }
	YY_BREAK
case 286:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 385 "sql.l"
{ yyerror(pp,"unterminated quoted user variable %s", yytext); }
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 388 "sql.l"
{ return ASSIGN; }
	YY_BREAK
/* comments */   
case 288:
YY_RULE_SETUP
#line 391 "sql.l"
;
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 392 "sql.l"
;
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 394 "sql.l"
{ oldstate = YY_START; BEGIN COMMENT; }
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 395 "sql.l"
{ BEGIN oldstate; }
	YY_BREAK
case 292:
/* rule 292 can match eol */
YY_RULE_SETUP
#line 396 "sql.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 397 "sql.l"
{ yyerror(pp,"unclosed comment"); }
	YY_BREAK
/* everything else */
case 293:
/* rule 293 can match eol */
YY_RULE_SETUP
#line 400 "sql.l"
/* white space */ {yylineno++;}
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 401 "sql.l"
{ yyerror(pp,"mystery character '%c'", *yytext); }
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 403 "sql.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3381 "lex.yy.c"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(BTWMODE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1232 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1232 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1231);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	yy_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf ,yyscanner );

	yyfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void yyset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int yylex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */

int yylex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    yyset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 403 "sql.l"


void GetCorrectString(char *dest, const char *src)
{
	int j = 0;
	for(int i = 1; i < strlen(src)-1; ++i)
	{
		if(src[i] == '\\')
		{
			if(src[i+1] == 'n')	// “\\n” -> “\n”
			{
				dest[j++] = '\n';
				++i;
			}
			else if(src[i+1] == 't')	// “\\t” -> “\t”
			{
				dest[j++] = '\t';
				++i;
			}
			else if(src[i+1] == '\'' && (i+1) != (strlen(src)-1))	// “\\\'” -> “\'”
			{
				dest[j++] = '\'';
				++i;
			}
			else if(src[i+1] == '\"' && (i+1) != (strlen(src)-1))	// “\\\"” -> “\"”
			{
				dest[j++] = '\"';
				++i;
			}
			else	
			{
				dest[j++] = src[i];
			}
		}
		else
		{
			dest[j++] = src[i];
		}
	}
	dest[j] = '\0';
}

