/*
 * Copyright [2012-2015] DaSE@ECNU
 *
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * ./LogicalPlan/logical_union.h
 *
 *  Created on: May 20, 2018
 *      Author: hqli
 *       Email: huang_qiuli@outlook.com
 *
 */
#ifndef LOGICAL_OPERATOR_LOGICAL_UNION_H_
#define LOGICAL_OPERATOR_LOGICAL_UNION_H_
#include <string>
#include <map>
#include <vector>

#include "../common/expression/expr_node.h"
#include "../catalog/attribute.h"
#include "../logical_operator/logical_operator.h"
#include "../physical_operator/physical_union.h"
#include "../physical_operator/physical_operator_base.h"
#include "../common/expression/expr_unary.h"

using claims::common::ExprNode;
using claims::common::ExprUnary;
using claims::physical_operator::PhysicalUnion;
using claims::physical_operator::PhysicalOperatorBase;

namespace claims {
namespace logical_operator {

class LogicalUnion : public LogicalOperator {
 public:
  LogicalUnion(vector<LogicalOperator*> children);
  virtual ~LogicalUnion();

 protected:
  /**
   * get plan context resulting from executing aggregation operator.
   * including corresponding attribute_list and property with partition info and
   * communication cost.
   */
  PlanContext GetPlanContext();
  /**
   * generate corresponding physical plan tree, mainly set necessary state_.
   */
  PhysicalOperatorBase* GetPhysicalPlan(const unsigned& block_size);

 private:
  // store the avg() column id, change avg() operation to sum(), and find one
  // count() column id.
  void Print(int level = 0) const;
  // for global agg, reconstruct the group by attributes and aggregation
  // attributes

  /**
   * generate a list containing attributes that are generated by the aggregation
   * operator.
   */

  vector<LogicalOperator*> children_;
  // vector<ExprNode*> group_by_attrs_;
  // vector<ExprUnary*> aggregation_attrs_;
  // vector<unsigned> avg_id_in_agg_;
  PlanContext* plan_context_;
};
}  // namespace logical_operator
}  // namespace claims
#endif  // LOGICAL_OPERATOR_LOGICAL_UNION_H_
